package com.example.miniprogect1.controller;import com.example.miniprogect1.Service.BelongingsService;import com.example.miniprogect1.Service.IlchonService;import com.example.miniprogect1.Service.MemberService;import com.example.miniprogect1.Service.UserService;import com.example.miniprogect1.domain.*;import com.example.miniprogect1.repository.ImgPathRepository;import com.example.miniprogect1.repository.MemberRepository;import jakarta.servlet.http.HttpSession;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import java.io.*;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.nio.file.StandardCopyOption;import java.util.List;import java.util.concurrent.ExecutionException;@Slf4j@Controllerpublic class myPageController {    private final MemberService memberService;    private final IlchonService ilchonService;    private final BelongingsService belongingsService;    private final ImgPathRepository imgPathRepository;    private final UserService userService;    public myPageController(MemberService memberService, IlchonService ilchonService, BelongingsService belongingsService, ImgPathRepository imgPathRepository, UserService userService) {        this.memberService = memberService;        this.ilchonService = ilchonService;        this.belongingsService = belongingsService;        this.imgPathRepository = imgPathRepository;        this.userService = userService;    }    @GetMapping("/home")    public String gethomeProfile(Model model, HttpSession session) throws IOException, ExecutionException, InterruptedException {        User user = (User) session.getAttribute("loginUser");        model.addAttribute("loginUser", user);        PurchasedProductEntity minimi = belongingsService.findById(user.getId()).stream().filter(b -> b.getProductEntity().getProductCategory().equals("미니미")).filter(z -> z.getApplied() == 'o').findFirst().orElse(new PurchasedProductEntity());        List<Ilchonpatch> holi = ilchonService.gust(user.getUserNickName());        Ilchonpatch ilchonpatch = ilchonService.alarmfriend(user.getUserNickName());        String userName = ilchonpatch != null ? ilchonpatch.getNickName() : "";        model.addAttribute("minimi", minimi);        model.addAttribute("request", holi.size());        model.addAttribute("userName", userName);        return "home";  // myroom.html에 값을 전달하고 표시합니다.    }    //페이징 처리    /*@GetMapping("/helo")    public ResponseEntity<?> listIlchons(HttpSession session, @PageableDefault Pageable pageable) {        ResponseDTO<Page<IlchonDTO>> responseDTO = new ResponseDTO<>();        try {            User user = (User) session.getAttribute("loginUser");            long userId = user.getId();            Page<Ilchon> page = ilchonService.getIlchonByUserId(userId, pageable);            Page<IlchonDTO> ilchonDTOPage = page.map(pageIlchon -> IlchonDTO.builder()                    .uId(pageIlchon.getId())                    .nick(pageIlchon.getNick())                    .name(pageIlchon.getName())                    .userId(pageIlchon.getUser().getId())                    .build());            responseDTO.setItem(ilchonDTOPage);            responseDTO.setStatusCode(HttpStatus.OK.value());            return ResponseEntity.ok().body(responseDTO);        } catch (Exception e) {            responseDTO.setErrorMessage(e.getMessage());            responseDTO.setStatusCode(HttpStatus.BAD_REQUEST.value());            return ResponseEntity.badRequest().body(responseDTO);        }    }*/    //프로필 이미지 변경    //프로필 사진 업로드/변경    //    마이룸 로그인 > 마이페이지 불러오기    @GetMapping("/myPage")    public String getUserProfile(Model model, HttpSession session, @RequestParam(defaultValue = "0") int page, @RequestParam(defaultValue = "4") int size) {        User user = (User) session.getAttribute("loginUser");        model.addAttribute("loginUser", user);        ImgPath imgPath = imgPathRepository.findByUser(user);        if (imgPath != null) {            model.addAttribute("profileImg", imgPath.getFileName());        } else {            // 사용자에 대한 ImgPath 객체가 없는 경우에 대한 처리 로직            // 예: 기본 이미지 파일 이름을 지정해 모델에 추가            String defaultImgFileName;            if (user.getSex().equals("여성")) {                defaultImgFileName = "GirlPro.png";            } else {                defaultImgFileName = "BoyPro.png";            }            model.addAttribute("profileImg", defaultImgFileName);        }        Pageable pageable = PageRequest.of(page, size);        Page<User> userPage = userService.getAllUsers(pageable);        model.addAttribute("userPage", userPage);        model.addAttribute("user", user);        return "myPage";    }    @PostMapping("/changeImg")    public String changeImg(@RequestParam("file") MultipartFile image, Model model, HttpSession session) throws IOException {        if (!image.isEmpty()) {            User user = (User) session.getAttribute("loginUser");            ImgPath imgPath = imgPathRepository.findByUser(user);            String origin = image.getOriginalFilename();            log.info(image.getOriginalFilename());            String projectPath = System.getProperty("user.dir") + "/src/main/resources/static/ProfileImgs";            Path path = Paths.get(projectPath).resolve(image.getOriginalFilename());            if (imgPath != null) {                imgPath.setFileName(origin);                imgPath.setFilePath("/static/ProfileImgs");            } else {                // 사용자에 대한 ImgPath 객체가 없는 경우에 대한 처리 로직                // 예: 새로운 ImgPath 객체를 생성하고 사용자와 연결                imgPath = new ImgPath();                imgPath.setUser(user);                imgPath.setFileName(origin);                imgPath.setFilePath("/static/ProfileImgs");            }            Files.copy(image.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);            System.out.println(origin + "wwwwwwwwwwwwwwwwwwww");            imgPathRepository.save(imgPath);            model.addAttribute("profileImg", origin);            System.out.println(origin);        }        return "redirect:/myPage";    }    @Controller    public class IlchonListController {        // UserRepository 인스턴스를 주입(inject)        @Autowired        private MemberRepository memberRepository;        @GetMapping("/ilchonList")        public String getIlchonList(Model model, Pageable pageable) {            // UserRepository를 사용하여 모든 사용자를 조회합니다.            Page<User> users = memberRepository.findAll(pageable);            // 조회된 사용자 목록을 Model에 추가하여 View에 전달합니다.            model.addAttribute("userPage", users);            // ilchonList.html 파일을 렌더링합니다.            return "ilchonList";        }    }}