package com.example.miniprogect1.controller;import com.example.miniprogect1.Service.BelongingsService;import com.example.miniprogect1.Service.ProductService;import com.example.miniprogect1.Service.PurchasedProductService;import com.example.miniprogect1.domain.ProductEntity;import com.example.miniprogect1.domain.PurchasedProductEntity;import com.example.miniprogect1.domain.ResponseDTO;import com.example.miniprogect1.domain.User;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;import jakarta.servlet.http.HttpSession;import lombok.RequiredArgsConstructor;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import org.springframework.web.servlet.ModelAndView;import java.util.ArrayList;import java.util.List;import java.util.stream.Collectors;@Controller@RequiredArgsConstructorpublic class ProductController {    private final ProductService productService;    private final PurchasedProductService purchasedProductService;    ////이것도 김은석이 넣은거    //어떻게 컨스트럭터 없이 할수있지?    BelongingsService belongingsService;    @Autowired    public ProductController(BelongingsService belongingsService, ProductService productService, PurchasedProductService purchasedProductService){        this.belongingsService = belongingsService;        this.productService = productService;        this.purchasedProductService = purchasedProductService;    }//김은석이 넣은거    @PostMapping("/miniroom")    public String saveProduct(ProductEntity productEntity, MultipartFile file) throws Exception {        System.out.println("==============" + productEntity);        productService.saveProduct(productEntity, file);        return "redirect:/miniroom";    }    @ResponseBody    @GetMapping ("/miniroom")    public ModelAndView getMiniroom() {        ModelAndView mv = new ModelAndView();        mv.setViewName("miniroom.html");        return mv;    }    @ResponseBody    @RequestMapping(value = "/product", method = RequestMethod.POST)    public List<ProductEntity> displayFurniture(@RequestParam("pcId") long pcId) {        //productEntity형태의 리스트 생성        List<ProductEntity> productEntityList = productService.getFurniture(pcId);        return productEntityList;    }    @GetMapping("/minimi")    public String getMinimi() {        return "minimi";    }    ///여기서부터 김은석이 추가한거    //////////////////////    //////////////////////    //////////////////////    //////////////////////    //////////////////////    //////////////////////    //////////////////////    //////////////////////    //////////////////////    //////////////////////    //////////////////////    @GetMapping("/bgm")    public ModelAndView getBgm(HttpSession session) {        ModelAndView mv = new ModelAndView();        String appliedbelongingsListJson = "";        User cyuser = (User) session.getAttribute("loginUser");///이게 가지고있는음악 목록        List<PurchasedProductEntity> belongingsList =belongingsService.findById(cyuser.getId()).stream().filter(b->b.getProductEntity().getProductCategory().equals("음악")).collect(Collectors.toList());        mv.addObject("belongingsList",belongingsList);////        ///여기부터는 판매 목록        List<ProductEntity> sellinglist = productService.findbyAllMusicWithCate();        List<PurchasedProductEntity> representativemusic =belongingsService.findById(cyuser.getId()).stream().filter(b->b.getProductEntity().getProductCategory().equals("음악")).collect(Collectors.toList());        mv.addObject("belongingsList",belongingsList);        /////여기수정함        /////여기수정함        /////여기수정함        /////여기수정함        /////여기수정함        /////여기수정함        /////여기수정함        List<Object[]> top5music = belongingsService.findtop5music();        List<ProductEntity> top5productentity = new ArrayList<>();        for (Object[] result : top5music) {            Long pId = (Long) result[0]; // assuming the first column is p_id and is of type Long            Long pcId = (Long) result[1]; // assuming the second column is pc_id and is of type Long            String productCategory = (String) result[2];            String productName = (String) result[3];            int productPrice = (int) result[4];            String productFilePath = (String) result[5];            String productFileName = (String) result[6];            int coordinateX = (int) result[7];            int coordinateY = (int) result[8];            ProductEntity productEntity = new ProductEntity();            productEntity.setPId(pId);            productEntity.setPcId(pcId);            productEntity.setProductCategory(productCategory);            productEntity.setProductName(productName);            productEntity.setProductPrice(productPrice);            productEntity.setProductFilePath(productFilePath);            productEntity.setProductFileName(productFileName);            productEntity.setCoordinateX(coordinateX);            productEntity.setCoordinateY(coordinateY);            top5productentity.add(productEntity);            // so on for other columns and their types...        }        System.out.println(top5productentity);        mv.addObject("top5productentity",top5productentity);        /////여기수정함        /////여기수정함        /////여기수정함        /////여기수정함        /////여기수정함        /////여기수정함        /////여기수정함        /////여기수정함        /////여기수정함        ObjectMapper objectMapper = new ObjectMapper();        objectMapper.registerModule(new JavaTimeModule());        try {            appliedbelongingsListJson = objectMapper.writeValueAsString(representativemusic);        } catch (JsonProcessingException e) {            throw new RuntimeException(e);        }        //////        mv.addObject("representativemusic2",appliedbelongingsListJson);        mv.addObject("belongingsList",belongingsList );        mv.addObject("sellinglist",sellinglist );        mv.setViewName("bgm.html");        return mv;    }    @PostMapping("/musicapplyforplayinbuyingmusic")    public ResponseEntity<?> musicapplyforplay(@RequestParam long productId, HttpSession session){        ResponseDTO<ProductEntity> responseDTO = new ResponseDTO<>();        User cyuser = (User) session.getAttribute("loginUser");        try {            ProductEntity belongings = productService.getProductEntitywithPid(productId);            responseDTO.setItem(belongings);            responseDTO.setStatusCode(HttpStatus.OK.value());            return ResponseEntity.ok().body(responseDTO);        } catch (Exception e) {            responseDTO.setStatusCode(HttpStatus.BAD_REQUEST.value());            responseDTO.setErrorMessage(e.getMessage());            return  ResponseEntity.badRequest().body(responseDTO);        }    }}