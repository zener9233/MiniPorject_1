package com.example.miniprogect1.controller;import com.example.miniprogect1.Service.CashService;import com.example.miniprogect1.Service.ProductService;import com.example.miniprogect1.Service.PurchasedProductService;import com.example.miniprogect1.Service.UserService;import com.example.miniprogect1.domain.*;import jakarta.servlet.http.HttpSession;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import java.util.HashMap;import java.util.List;import java.util.Map;@Controllerpublic class PurchasedProductController {    private final PurchasedProductService purchasedProductService;    private final UserService userService;    private CashService cashService;    private final ProductService productService;    public PurchasedProductController(PurchasedProductService purchasedProductService,                                      UserService userService,                                      ProductService productService,                                      CashService cashService) {        this.purchasedProductService = purchasedProductService;        this.userService = userService;        this.productService = productService;        this.cashService = cashService;    }//    @GetMapping("/purchase/{Id}")//    public String purchaseView(@PathVariable("Id") String Id, HttpSession session) {////        User loginUser = (User) session.getAttribute("loginUser");////        if(loginUser == null) {//            return "redirect:/login";//        }//        return "miniroom";//    }    //구매하기 버튼 눌렀을때 DB에 Id, pid 저장시켜줄 메소드    @ResponseBody    @PostMapping("/purchase")    public ResponseEntity<?> purchase(HttpSession session,                                      ProductEntity productEntity) {        UserDotori user = new UserDotori();        ResponseDTO<Map<String, String>> responseDTO = new ResponseDTO<>();        try {            System.out.println("success");            Map<String, String> returnMap = new HashMap<>();            PurchasedProductEntity purchasedProductEntity = new PurchasedProductEntity();            User loginUser = (User) session.getAttribute("loginUser"); //세션에 담긴 로그인 유저 정보 찾기            productEntity = purchasedProductService.getProductInfo(productEntity.getPId()); //상품 id로 상품 정보 찾기            purchasedProductEntity.setUser(loginUser); //구매테이블에 로그인한 유저 정보 담기            System.out.println(purchasedProductEntity);            if(loginUser.getBamtori() < productEntity.getProductPrice()) {                System.out.println(loginUser.getBamtori()+"=============");                returnMap.put("msg", "charge"); //보유밤토리 적으면 충전 페이지 보내기            } else {                loginUser.setBamtori(loginUser.getBamtori() - productEntity.getProductPrice());                userService.saveBamtori(loginUser); // 로그인 유저의 밤토리 세팅하기                purchasedProductEntity.setProductEntity(productEntity); //구매테이블에 상품 정보 담기                purchasedProductService.purchase(purchasedProductEntity); //구매 테이블에 정보 저장하기                user.setUserName(loginUser.getUserName());                long min = -productEntity.getProductPrice();                user.setDotori(min);                returnMap.put("msg", "complete");                cashService.ChargeCash(user);            }            responseDTO.setItem(returnMap);            responseDTO.setStatusCode(HttpStatus.OK.value());            return ResponseEntity.ok().body(responseDTO);        } catch (Exception e) {            responseDTO.setStatusCode(HttpStatus.BAD_REQUEST.value());            responseDTO.setErrorMessage(e.getMessage());            return ResponseEntity.badRequest().body(responseDTO);        }    }    //오른쪽 아래에 내가 구입한 물품 보여줄 메소드    @ResponseBody //ajax로 값을 받을떈 responsebody를 쓴다. (restcontroller를 썻다면 필요없었다)    @RequestMapping(value = "/preview", method = RequestMethod.POST)    public ResponseEntity<?> preview(HttpSession session, ProductEntity productEntity) { //ajax로 주고받을 데이터의 형식이 productentitiy타입의 list라서 리턴타입도 맞춰준다.        long pcId = productEntity.getPcId();        ResponseDTO<Map<String, Object>> responseDTO = new ResponseDTO<>();        try {            User loginUser = (User) session.getAttribute("loginUser"); //세션에 저장된 로그인 유저의 데이터를 불러온다            List<Map<String, Object>> purchasedProductEntityList =                    null;            if(loginUser != null) {                purchasedProductEntityList                        = purchasedProductService.getOwingProduct(loginUser, pcId); //아이디별로 구입한 상품을 리스트화 시켜서 가져온다.                responseDTO.setErrorMessage("Ok");                responseDTO.setItems(purchasedProductEntityList);                responseDTO.setStatusCode(HttpStatus.OK.value());            } else {                responseDTO.setErrorMessage("Fail");                responseDTO.setItems(null);                responseDTO.setStatusCode(HttpStatus.OK.value());            }            return ResponseEntity.ok().body(responseDTO);        } catch (Exception e){            responseDTO.setStatusCode(HttpStatus.BAD_REQUEST.value());            responseDTO.setErrorMessage(e.getMessage());            return ResponseEntity.badRequest().body(responseDTO);        }    }}